<?php
// Start of extension: Core
// - parsed on POSIX with PHP 7.2.3 (extension version 7.2.3)
// - parsed on Windows with PHP 7.2.4 (extension version 7.2.4)

/**
 * The class name. The class name includes the namespace
 * it was declared in (e.g. <code>Foo\Bar</code>).
 * Note that as of PHP 5.4 __CLASS__ works also in traits. When used
 * in a trait method, __CLASS__ is the name of the class the trait
 * is used in.
 *
 * @link http://www.php.net/manual/en/language.constants.predefined.php#constant.class
 *
 * @var string
 */
define('__CLASS__', 'Name\\Space\\ClassName');

/**
 * The directory of the file. If used inside an include,
 * the directory of the included file is returned. This is equivalent
 * to <code>dirname(__FILE__)</code>. This directory name
 * does not have a trailing slash unless it is the root directory.
 *
 * @link http://www.php.net/manual/en/language.constants.predefined.php#constant.dir
 *
 * @var string
 */
define('__DIR__', '/path/to');

/**
 * The full path and filename of the file with symlinks resolved. If used inside an include,
 * the name of the included file is returned.
 *
 * @link http://www.php.net/manual/en/language.constants.predefined.php#constant.file
 *
 * @var string
 */
define('__FILE__', '/path/to/file.php');

/**
 * The function name.
 *
 * @link http://www.php.net/manual/en/language.constants.predefined.php#constant.function
 *
 * @var string
 */
define('__FUNCTION__', 'functionName');

/**
 * The current line number of the file.
 *
 * @link http://www.php.net/manual/en/language.constants.predefined.php#constant.line
 *
 * @var int
 */
define('__LINE__', 1);

/**
 * The class method name.
 *
 * @link http://www.php.net/manual/en/language.constants.predefined.php#constant.method
 *
 * @var string
 */
define('__METHOD__', 'Name\\Space\\ClassName::functionName');

/**
 * The name of the current namespace.
 *
 * @link http://www.php.net/manual/en/language.constants.predefined.php#constant.namespace
 *
 * @var string
 */
define('__NAMESPACE__', 'Name\\Space');

/**
 * The trait name. The trait name includes the namespace
 * it was declared in (e.g. <code>Foo\Bar</code>).
 *
 * @link http://www.php.net/manual/en/language.constants.predefined.php#constant.trait
 *
 * @var string
 */
define('__TRAIT__', 'Name\\Space\\TraitName');

/**
 * @var int
 */
const DEBUG_BACKTRACE_IGNORE_ARGS = 2;

/**
 * @var int
 */
const DEBUG_BACKTRACE_PROVIDE_OBJECT = 1;

/**
 * @var string
 */
const DEFAULT_INCLUDE_PATH = '.:/usr/local/lib/php';

/**
 * All errors and warnings, as supported, except of level
 * <code>E_STRICT</code> prior to PHP 5.4.0.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-strict
 *
 * @var int
 */
const E_ALL = 32767;

/**
 * Fatal compile-time errors. This is like an <code>E_ERROR</code>,
 * except it is generated by the Zend Scripting Engine.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-compile-error
 *
 * @var int
 */
const E_COMPILE_ERROR = 64;

/**
 * Compile-time warnings (non-fatal errors). This is like an
 * <code>E_WARNING</code>, except it is generated by the Zend
 * Scripting Engine.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-compile-warning
 *
 * @var int
 */
const E_COMPILE_WARNING = 128;

/**
 * Fatal errors that occur during PHP's initial startup. This is like an
 * <code>E_ERROR</code>, except it is generated by the core of PHP.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-core-error
 *
 * @var int
 */
const E_CORE_ERROR = 16;

/**
 * Warnings (non-fatal errors) that occur during PHP's initial startup.
 * This is like an <code>E_WARNING</code>, except it is generated
 * by the core of PHP.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-core-warning
 *
 * @var int
 */
const E_CORE_WARNING = 32;

/**
 * Run-time notices. Enable this to receive warnings about code
 * that will not work in future versions.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-deprecated-error
 *
 * @var int
 */
const E_DEPRECATED = 8192;

/**
 * Fatal run-time errors. These indicate errors that can not be
 * recovered from, such as a memory allocation problem.
 * Execution of the script is halted.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-error
 *
 * @var int
 */
const E_ERROR = 1;

/**
 * Run-time notices. Indicate that the script encountered something that
 * could indicate an error, but could also happen in the normal course of
 * running a script.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-notice
 *
 * @var int
 */
const E_NOTICE = 8;

/**
 * Compile-time parse errors. Parse errors should only be generated by
 * the parser.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-parse
 *
 * @var int
 */
const E_PARSE = 4;

/**
 * Catchable fatal error. It indicates that a probably dangerous error
 * occurred, but did not leave the Engine in an unstable state. If the error
 * is not caught by a user defined handle (see also
 * <code>set_error_handler</code>), the application aborts as it
 * was an <code>E_ERROR</code>.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-recoverable-error
 *
 * @var int
 */
const E_RECOVERABLE_ERROR = 4096;

/**
 * Enable to have PHP suggest changes
 * to your code which will ensure the best interoperability
 * and forward compatibility of your code.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-strict
 *
 * @var int
 */
const E_STRICT = 2048;

/**
 * User-generated warning message. This is like an
 * <code>E_DEPRECATED</code>, except it is generated in PHP code by
 * using the PHP function <code>trigger_error</code>.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-user-deprecated
 *
 * @var int
 */
const E_USER_DEPRECATED = 16384;

/**
 * User-generated error message. This is like an
 * <code>E_ERROR</code>, except it is generated in PHP code by
 * using the PHP function <code>trigger_error</code>.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-user-error
 *
 * @var int
 */
const E_USER_ERROR = 256;

/**
 * User-generated notice message. This is like an
 * <code>E_NOTICE</code>, except it is generated in PHP code by
 * using the PHP function <code>trigger_error</code>.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-user-notice
 *
 * @var int
 */
const E_USER_NOTICE = 1024;

/**
 * User-generated warning message. This is like an
 * <code>E_WARNING</code>, except it is generated in PHP code by
 * using the PHP function <code>trigger_error</code>.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-user-warning
 *
 * @var int
 */
const E_USER_WARNING = 512;

/**
 * Run-time warnings (non-fatal errors). Execution of the script is not
 * halted.
 *
 * @link http://www.php.net/manual/en/errorfunc.constants.php#errorfunc.constants.errorlevels.e-warning
 *
 * @var int
 */
const E_WARNING = 2;

/**
 * @link http://www.php.net/manual/en/maxdb.constants.php
 *
 * @var bool
 */
const FALSE = false;

/**
 * @link http://www.php.net/manual/en/function.get-defined-constants.php
 *
 * @var null
 */
const NULL = null;

/**
 * @var string
 */
const PEAR_EXTENSION_DIR = '/usr/local/lib/php/extensions/no-debug-non-zts-20170718';

/**
 * @var string
 */
const PEAR_INSTALL_DIR = '/usr/local/lib/php';

/**
 * @var string
 */
const PHP_BINARY = '/usr/local/bin/php';

/**
 * @var string
 */
const PHP_BINDIR = '/usr/local/bin';

/**
 * @var string
 */
const PHP_CONFIG_FILE_PATH = '/usr/local/etc/php';

/**
 * @var string
 */
const PHP_CONFIG_FILE_SCAN_DIR = '/usr/local/etc/php/conf.d';

/**
 * @var string
 */
const PHP_DATADIR = '/usr/local/share/php';

/**
 * @var int
 */
const PHP_DEBUG = 0;

/**
 * @var string
 */
const PHP_EOL = "\n";

/**
 * @var string
 */
const PHP_EXTENSION_DIR = '/usr/local/lib/php/extensions/no-debug-non-zts-20170718';

/**
 * @var string
 */
const PHP_EXTRA_VERSION = '';

/**
 * @var int
 */
const PHP_FD_SETSIZE = 1024;

/**
 * @var int
 */
const PHP_FLOAT_DIG = 15;

/**
 * @var float
 */
const PHP_FLOAT_EPSILON = 2.2204460492503E-16;

/**
 * @var float
 */
const PHP_FLOAT_MAX = 1.7976931348623E+308;

/**
 * @var float
 */
const PHP_FLOAT_MIN = 2.2250738585072E-308;

/**
 * @var float
 */
const PHP_INT_MAX = 9223372036854775807;

/**
 * @var float
 */
const PHP_INT_MIN = -9223372036854775808;

/**
 * @var int
 */
const PHP_INT_SIZE = 8;

/**
 * @var string
 */
const PHP_LIBDIR = '/usr/local/lib/php';

/**
 * @var string
 */
const PHP_LOCALSTATEDIR = '/usr/local/var';

/**
 * @var int
 */
const PHP_MAJOR_VERSION = 7;

/**
 * WARNING: this may be available on POSIX but not on Windows
 *
 * @var string
 */
const PHP_MANDIR = '/usr/local/php/man';

/**
 * @var int
 */
const PHP_MAXPATHLEN = 4096;

/**
 * @var int
 */
const PHP_MINOR_VERSION = 2;

/**
 * @var string
 */
const PHP_OS = 'Linux';

/**
 * @var string
 */
const PHP_OS_FAMILY = 'Linux';

/**
 * Indicates that the output buffer has been cleaned.
 * Available since PHP 5.4.
 *
 * @link http://www.php.net/manual/en/outcontrol.constants.php#constant.php-output-handler-clean
 *
 * @var int
 */
const PHP_OUTPUT_HANDLER_CLEAN = 2;

/**
 * Controls whether an output buffer created by
 * <code>ob_start</code> can be cleaned.
 * Available since PHP 5.4.
 *
 * @link http://www.php.net/manual/en/outcontrol.constants.php#constant.php-output-handler-cleanable
 *
 * @var int
 */
const PHP_OUTPUT_HANDLER_CLEANABLE = 16;

/**
 * Indicates that the buffer has been flushed, but output buffering will
 * continue.
 * As of PHP 5.4, this is an alias for
 * <code>PHP_OUTPUT_HANDLER_WRITE</code>.
 *
 * @link http://www.php.net/manual/en/outcontrol.constants.php#constant.php-output-handler-cont
 *
 * @var int
 */
const PHP_OUTPUT_HANDLER_CONT = 0;

/**
 * @var int
 */
const PHP_OUTPUT_HANDLER_DISABLED = 8192;

/**
 * Indicates that output buffering has ended.
 * As of PHP 5.4, this is an alias for
 * <code>PHP_OUTPUT_HANDLER_FINAL</code>.
 *
 * @link http://www.php.net/manual/en/outcontrol.constants.php#constant.php-output-handler-end
 *
 * @var int
 */
const PHP_OUTPUT_HANDLER_END = 8;

/**
 * Indicates that this is the final output buffering operation.
 * Available since PHP 5.4.
 *
 * @link http://www.php.net/manual/en/outcontrol.constants.php#constant.php-output-handler-final
 *
 * @var int
 */
const PHP_OUTPUT_HANDLER_FINAL = 8;

/**
 * Indicates that the buffer has been flushed.
 * Available since PHP 5.4.
 *
 * @link http://www.php.net/manual/en/outcontrol.constants.php#constant.php-output-handler-flush
 *
 * @var int
 */
const PHP_OUTPUT_HANDLER_FLUSH = 4;

/**
 * Controls whether an output buffer created by
 * <code>ob_start</code> can be flushed.
 * Available since PHP 5.4.
 *
 * @link http://www.php.net/manual/en/outcontrol.constants.php#constant.php-output-handler-flushable
 *
 * @var int
 */
const PHP_OUTPUT_HANDLER_FLUSHABLE = 32;

/**
 * Controls whether an output buffer created by
 * <code>ob_start</code> can be removed before the end of the script.
 * Available since PHP 5.4.
 *
 * @link http://www.php.net/manual/en/outcontrol.constants.php#constant.php-output-handler-removable
 *
 * @var int
 */
const PHP_OUTPUT_HANDLER_REMOVABLE = 64;

/**
 * Indicates that output buffering has begun.
 *
 * @link http://www.php.net/manual/en/outcontrol.constants.php#constant.php-output-handler-start
 *
 * @var int
 */
const PHP_OUTPUT_HANDLER_START = 1;

/**
 * @var int
 */
const PHP_OUTPUT_HANDLER_STARTED = 4096;

/**
 * The default set of output buffer flags; currently equivalent to
 * <code>PHP_OUTPUT_HANDLER_CLEANABLE</code> |
 * <code>PHP_OUTPUT_HANDLER_FLUSHABLE</code> |
 * <code>PHP_OUTPUT_HANDLER_REMOVABLE</code>.
 * Available since PHP 5.4.
 *
 * @link http://www.php.net/manual/en/outcontrol.constants.php#constant.php-output-handler-stdflags
 *
 * @var int
 */
const PHP_OUTPUT_HANDLER_STDFLAGS = 112;

/**
 * Indicates that the output buffer is being flushed, and had data to output.
 * Available since PHP 5.4.
 *
 * @link http://www.php.net/manual/en/outcontrol.constants.php#constant.php-output-handler-write
 *
 * @var int
 */
const PHP_OUTPUT_HANDLER_WRITE = 0;

/**
 * @var string
 */
const PHP_PREFIX = '/usr/local';

/**
 * @var int
 */
const PHP_RELEASE_VERSION = 3;

/**
 * @var string
 */
const PHP_SAPI = 'cli';

/**
 * @var string
 */
const PHP_SHLIB_SUFFIX = 'so';

/**
 * @var string
 */
const PHP_SYSCONFDIR = '/usr/local/etc';

/**
 * @var string
 */
const PHP_VERSION = '7.2.3';

/**
 * @var int
 */
const PHP_VERSION_ID = 70203;

/**
 * This is a domain controller
 *
 * WARNING: this may be available on Windows but not on POSIX
 *
 * @link http://www.php.net/manual/en/info.constants.php#constant.php-windows-nt-domain-controller
 *
 * @var int
 */
const PHP_WINDOWS_NT_DOMAIN_CONTROLLER = 2;

/**
 * This is a server system (eg. Server 2008/2003/2000), note that if this is a 
 * domain controller its reported as <code>PHP_WINDOWS_NT_DOMAIN_CONTROLLER</code>.
 *
 * WARNING: this may be available on Windows but not on POSIX
 *
 * @link http://www.php.net/manual/en/info.constants.php#constant.php-windows-nt-server
 *
 * @var int
 */
const PHP_WINDOWS_NT_SERVER = 3;

/**
 * This is a workstation system (eg. Vista/XP/2000/NT4)
 *
 * WARNING: this may be available on Windows but not on POSIX
 *
 * @link http://www.php.net/manual/en/info.constants.php#constant.php-windows-nt-workstation
 *
 * @var int
 */
const PHP_WINDOWS_NT_WORKSTATION = 1;

/**
 * The Windows build number (for example, Windows Vista with SP1 applied is build 6001)
 *
 * WARNING: this may be available on Windows but not on POSIX
 *
 * @link http://www.php.net/manual/en/info.constants.php#constant.php-windows-version-build
 *
 * @var int
 */
const PHP_WINDOWS_VERSION_BUILD = 16299;

/**
 * The major version of Windows, this can be either <code>4</code> (NT4/Me/98/95), 
 * <code>5</code> (XP/2003 R2/2003/2000) or <code>6</code> (Vista/2008/7/8/8.1).
 *
 * WARNING: this may be available on Windows but not on POSIX
 *
 * @link http://www.php.net/manual/en/info.constants.php#constant.php-windows-version-major
 *
 * @var int
 */
const PHP_WINDOWS_VERSION_MAJOR = 10;

/**
 * The minor version of Windows, this can be either <code>0</code> (Vista/2008/2000/NT4/95), 
 * <code>1</code> (XP), <code>2</code> (2003 R2/2003/XP x64), <code>10</code> (98) 
 * or <code>90</code> (ME).
 *
 * WARNING: this may be available on Windows but not on POSIX
 *
 * @link http://www.php.net/manual/en/info.constants.php#constant.php-windows-version-minor
 *
 * @var int
 */
const PHP_WINDOWS_VERSION_MINOR = 0;

/**
 * The platform that PHP currently is running on, this value is <code>2</code> on Windows 
 * Vista/XP/2000/NT4, Server 2008/2003 and on Windows ME/98/95 this value is <code>1</code>.
 *
 * WARNING: this may be available on Windows but not on POSIX
 *
 * @link http://www.php.net/manual/en/info.constants.php#constant.php-windows-version-platform
 *
 * @var int
 */
const PHP_WINDOWS_VERSION_PLATFORM = 2;

/**
 * This contains the value used to determine the <code>PHP_WINDOWS_NT_*</code>
 * constants. This value may be one of the <code>PHP_WINDOWS_NT_*</code> constants 
 * indicating the platform type.
 *
 * WARNING: this may be available on Windows but not on POSIX
 *
 * @link http://www.php.net/manual/en/info.constants.php#constant.php-windows-version-producttype
 *
 * @var int
 */
const PHP_WINDOWS_VERSION_PRODUCTTYPE = 1;

/**
 * The major version of the service pack installed, this value is <code>0</code> 
 * if no service pack is installed. For example, Windows XP with service pack 3 installed 
 * will make this value <code>3</code>.
 *
 * WARNING: this may be available on Windows but not on POSIX
 *
 * @link http://www.php.net/manual/en/info.constants.php#constant.php-windows-version-sp-major
 *
 * @var int
 */
const PHP_WINDOWS_VERSION_SP_MAJOR = 0;

/**
 * The minor version of the service pack installed, this value is <code>0</code> 
 * if no service pack is installed.
 *
 * WARNING: this may be available on Windows but not on POSIX
 *
 * @link http://www.php.net/manual/en/info.constants.php#constant.php-windows-version-sp-minor
 *
 * @var int
 */
const PHP_WINDOWS_VERSION_SP_MINOR = 0;

/**
 * The suitemask is a bitmask that can tell if various features of Windows is installed, 
 * see the table below for possible bitfield values.
 *
 * WARNING: this may be available on Windows but not on POSIX
 *
 * @link http://www.php.net/manual/en/info.constants.php#constant.php-windows-version-suitemask
 *
 * @var int
 */
const PHP_WINDOWS_VERSION_SUITEMASK = 256;

/**
 * @var int
 */
const PHP_ZTS = 0;

/**
 * @var resource
 */
const STDERR = 'Resource id #3';

/**
 * @var resource
 */
const STDIN = 'Resource id #1';

/**
 * @var resource
 */
const STDOUT = 'Resource id #2';

/**
 * @link http://www.php.net/manual/en/maxdb.constants.php
 *
 * @var bool
 */
const TRUE = true;

/**
 * @var int
 */
const UPLOAD_ERR_CANT_WRITE = 7;

/**
 * @var int
 */
const UPLOAD_ERR_EXTENSION = 8;

/**
 * @var int
 */
const UPLOAD_ERR_FORM_SIZE = 2;

/**
 * @var int
 */
const UPLOAD_ERR_INI_SIZE = 1;

/**
 * @var int
 */
const UPLOAD_ERR_NO_FILE = 4;

/**
 * @var int
 */
const UPLOAD_ERR_NO_TMP_DIR = 6;

/**
 * @var int
 */
const UPLOAD_ERR_OK = 0;

/**
 * @var int
 */
const UPLOAD_ERR_PARTIAL = 3;

/**
 * @var bool
 */
const ZEND_DEBUG_BUILD = false;

/**
 * @var bool
 */
const ZEND_THREAD_SAFE = false;

/**
 * Interface to provide accessing objects as arrays.
 *
 * @since PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/class.arrayaccess.php
 */
interface ArrayAccess
{
    /**
     * @param mixed $offset
     *
     * @since PHP 5, PHP 7
     */
    public function offsetExists($offset);

    /**
     * @param mixed $offset
     *
     * @since PHP 5, PHP 7
     */
    public function offsetGet($offset);

    /**
     * @param mixed $offset
     * @param mixed $value
     *
     * @since PHP 5, PHP 7
     */
    public function offsetSet($offset, $value);

    /**
     * @param mixed $offset
     *
     * @since PHP 5, PHP 7
     */
    public function offsetUnset($offset);
}

/**
 * Classes implementing <code>Countable</code> can be used with the
 * <code>count</code> function.
 *
 * @since PHP 5 >= 5.1.0, PHP 7
 *
 * @link http://www.php.net/manual/en/class.countable.php
 */
interface Countable
{
    /**
     * Count elements of an object
     *
     * @return int
     *
     * @since PHP 5 >= 5.1.0, PHP 7
     *
     * @link http://www.php.net/manual/en/countable.count.php
     */
    public function count(): int;
}

/**
 * Interface for external iterators or objects that can be iterated
 * themselves internally.
 *
 * @since PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/class.iterator.php
 */
interface Iterator extends Traversable
{
    /**
     * @since PHP 5, PHP 7
     */
    public function current();

    /**
     * @since PHP 5, PHP 7
     */
    public function key();

    /**
     * @since PHP 5, PHP 7
     */
    public function next();

    /**
     * @since PHP 5, PHP 7
     */
    public function rewind();

    /**
     * @since PHP 5, PHP 7
     */
    public function valid();
}

/**
 * Interface to create an external Iterator.
 *
 * @since PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/class.iteratoraggregate.php
 */
interface IteratorAggregate extends Traversable
{
    /**
     * @since PHP 5, PHP 7
     */
    public function getIterator();
}

/**
 * Interface for customized serializing.
 *
 * @since PHP 5 >= 5.1.0, PHP 7
 *
 * @link http://www.php.net/manual/en/class.serializable.php
 */
interface Serializable
{
    /**
     * @since PHP 5 >= 5.1.0, PHP 7
     */
    public function serialize();

    /**
     * @param mixed $serialized
     *
     * @since PHP 5 >= 5.1.0, PHP 7
     */
    public function unserialize($serialized);
}

/**
 * <code>Throwable</code> is the base interface for any object that
 * can be thrown via a <code>throw</code> statement in PHP 7, including
 * <code>Error</code> and <code>Exception</code>.
 *
 * @since PHP 7
 *
 * @link http://www.php.net/manual/en/class.throwable.php
 */
interface Throwable
{
    /**
     * @since PHP 7
     */
    public function __toString();

    /**
     * @since PHP 7
     */
    public function getCode();

    /**
     * @since PHP 7
     */
    public function getFile();

    /**
     * @since PHP 7
     */
    public function getLine();

    /**
     * @since PHP 7
     */
    public function getMessage();

    /**
     * @since PHP 7
     */
    public function getPrevious();

    /**
     * @since PHP 7
     */
    public function getTrace();

    /**
     * @since PHP 7
     */
    public function getTraceAsString();
}

/**
 * Interface to detect if a class is traversable using foreach.
 *
 * @since PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/class.traversable.php
 */
interface Traversable
{
}

/**
 * <code>ArgumentCountError</code> is thrown
 * when too few arguments are passed to a user-defined function or method.
 *
 * @since PHP 7 >= PHP 7.1.0
 *
 * @link http://www.php.net/manual/en/class.php#class.argumentcounterror
 */
class ArgumentCountError extends TypeError
{
}

/**
 * <code>ArithmeticError</code> is thrown when
 * an error occurs while performing mathematical operations. In PHP 7.0,
 * these errors include attempting to perform a bitshift by a negative
 * amount, and any call to <code>intdiv</code> that would result in a
 * value outside the possible bounds of an <code>integer</code>.
 *
 * @since PHP 7
 *
 * @link http://www.php.net/manual/en/class.php#class.arithmeticerror
 */
class ArithmeticError extends Error
{
}

class ClosedGeneratorException extends Exception
{
}

/**
 * Class used to represent anonymous
 * functions.
 *
 * @since PHP 5 >= 5.3.0, PHP 7
 *
 * @link http://www.php.net/manual/en/class.closure.php
 */
final class Closure
{
    /**
     * @since PHP 5 >= 5.3.0, PHP 7
     */
    private function __construct()
    {
    }

    /**
     * @param mixed $closure
     * @param mixed $newthis
     * @param mixed|null $newscope
     *
     * @since PHP 5 >= 5.4.0, PHP 7
     */
    public static function bind($closure, $newthis, $newscope = null)
    {
    }

    /**
     * @param mixed $newthis
     * @param mixed|null $newscope
     *
     * @since PHP 5 >= 5.4.0, PHP 7
     */
    public function bindTo($newthis, $newscope = null)
    {
    }

    /**
     * @param mixed $newthis
     * @param mixed $parameters
     *
     * @since PHP 7
     */
    public function call($newthis, ...$parameters)
    {
    }

    /**
     * @param mixed $callable
     *
     * @since PHP 7 >= 7.1.0
     */
    public static function fromCallable($callable)
    {
    }
}

/**
 * <code>DivisionByZeroError</code> is thrown
 * when an attempt is made to divide a number by zero.
 *
 * @since PHP 7
 *
 * @link http://www.php.net/manual/en/class.php#class.divisionbyzeroerror
 */
class DivisionByZeroError extends ArithmeticError
{
}

/**
 * <code>Error</code> is the base class for all
 * internal PHP errors.
 *
 * @since PHP 7
 *
 * @link http://www.php.net/manual/en/class.error.php
 */
class Error implements Throwable
{
    final private function __clone()
    {
    }

    /**
     * @param mixed|null $message
     * @param mixed|null $code
     * @param mixed|null $previous
     */
    public function __construct($message = null, $code = null, $previous = null)
    {
    }

    public function __toString()
    {
    }

    public function __wakeup()
    {
    }

    final public function getCode()
    {
    }

    final public function getFile()
    {
    }

    final public function getLine()
    {
    }

    final public function getMessage()
    {
    }

    final public function getPrevious()
    {
    }

    final public function getTrace()
    {
    }

    final public function getTraceAsString()
    {
    }
}

/**
 * An Error Exception.
 *
 * @since PHP 5 >= 5.1.0, PHP 7
 *
 * @link http://www.php.net/manual/en/class.php#class.errorexception
 */
class ErrorException extends Exception
{
    /**
     * @param mixed|null $message
     * @param mixed|null $code
     * @param mixed|null $severity
     * @param mixed|null $filename
     * @param mixed|null $lineno
     * @param mixed|null $previous
     *
     * @since PHP 5 >= 5.1.0, PHP 7
     */
    public function __construct($message = null, $code = null, $severity = null, $filename = null, $lineno = null, $previous = null)
    {
    }

    /**
     * @since PHP 5 >= 5.1.0, PHP 7
     */
    final public function getSeverity()
    {
    }
}

/**
 * <code>Exception</code> is the base class for
 * all Exceptions in PHP 5, and the base class for all user exceptions in PHP
 * 7.
 *
 * @since PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/class.php#class.exception
 */
class Exception implements Throwable
{
    /**
     * @since PHP 5, PHP 7
     */
    final private function __clone()
    {
    }

    /**
     * @param mixed|null $message
     * @param mixed|null $code
     * @param mixed|null $previous
     *
     * @since PHP 5, PHP 7
     */
    public function __construct($message = null, $code = null, $previous = null)
    {
    }

    /**
     * @since PHP 5, PHP 7
     */
    public function __toString()
    {
    }

    public function __wakeup()
    {
    }

    /**
     * @since PHP 5, PHP 7
     */
    final public function getCode()
    {
    }

    /**
     * @since PHP 5, PHP 7
     */
    final public function getFile()
    {
    }

    /**
     * @since PHP 5, PHP 7
     */
    final public function getLine()
    {
    }

    /**
     * @since PHP 5, PHP 7
     */
    final public function getMessage()
    {
    }

    /**
     * @since PHP 5 >= 5.3.0, PHP 7
     */
    final public function getPrevious()
    {
    }

    /**
     * @since PHP 5, PHP 7
     */
    final public function getTrace()
    {
    }

    /**
     * @since PHP 5, PHP 7
     */
    final public function getTraceAsString()
    {
    }
}

/**
 * <code>Generator</code> objects are returned from generators.
 *
 * @since PHP 5 >= 5.5.0, PHP 7
 *
 * @link http://www.php.net/manual/en/class.generator.php
 */
final class Generator implements Iterator
{
    /**
     * @since PHP 5 >= 5.5.0, PHP 7
     */
    public function __wakeup()
    {
    }

    /**
     * @since PHP 5 >= 5.5.0, PHP 7
     */
    public function current()
    {
    }

    /**
     * @since PHP 7
     */
    public function getReturn()
    {
    }

    /**
     * @since PHP 5 >= 5.5.0, PHP 7
     */
    public function key()
    {
    }

    /**
     * @since PHP 5 >= 5.5.0, PHP 7
     */
    public function next()
    {
    }

    /**
     * @since PHP 5 >= 5.5.0, PHP 7
     */
    public function rewind()
    {
    }

    /**
     * @param mixed $value
     *
     * @since PHP 5 >= 5.5.0, PHP 7
     */
    public function send($value)
    {
    }

    /**
     * @param mixed $exception
     *
     * @since PHP 5 >= 5.5.0, PHP 7
     */
    public function throw($exception)
    {
    }

    /**
     * @since PHP 5 >= 5.5.0, PHP 7
     */
    public function valid()
    {
    }
}

/**
 * <code>ParseError</code> is thrown when an
 * error occurs while parsing PHP code, such as when
 * <code>eval</code> is called.
 *
 * @since PHP 7
 *
 * @link http://www.php.net/manual/en/class.php#class.parseerror
 */
class ParseError extends Error
{
}

class stdClass
{
}

/**
 * There are three scenarios where a
 * <code>TypeError</code> may be thrown. The
 * first is where the argument type being passed to a function does not match
 * its corresponding declared parameter type. The second is where a value
 * being returned from a function does not match the declared function return
 * type. The third is where an invalid number of arguments are passed to a
 * built-in PHP function (strict mode only).
 *
 * @since PHP 7
 *
 * @link http://www.php.net/manual/en/class.php#class.typeerror
 */
class TypeError extends Error
{
}

/**
 * Creates an alias for a class
 *
 * @param mixed $user_class_name
 * @param mixed $alias_name
 * @param mixed|null $autoload
 *
 * @return bool
 *
 * @since PHP 5 >= 5.3.0, PHP 7
 *
 * @link http://www.php.net/manual/en/function.class-alias.php
 */
function class_alias($user_class_name, $alias_name, $autoload = null): bool
{
}

/**
 * Checks if the class has been defined
 *
 * @param mixed $classname
 * @param mixed|null $autoload
 *
 * @return bool
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.class-exists.php
 */
function class_exists($classname, $autoload = null): bool
{
}

/**
 * Create an anonymous (lambda-style) function
 *
 * @param mixed $args
 * @param mixed $code
 *
 * @return string
 *
 * @since PHP 4 >= 4.0.1, PHP 5, PHP 7
 *
 * @deprecated as of PHP 7.2.0
 *
 * @link http://www.php.net/manual/en/function.create-function.php
 */
function create_function($args, $code): string
{
}

/**
 * Generates a backtrace
 *
 * @param mixed|null $options
 * @param mixed|null $limit
 *
 * @return array
 *
 * @since PHP 4 >= 4.3.0, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.debug-backtrace.php
 */
function debug_backtrace($options = null, $limit = null): array
{
}

/**
 * Prints a backtrace
 *
 * @param mixed|null $options
 * @param mixed|null $limit
 *
 * @return void
 *
 * @since PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.debug-print-backtrace.php
 */
function debug_print_backtrace($options = null, $limit = null)
{
}

/**
 * Defines a named constant
 *
 * @param mixed $constant_name
 * @param mixed $value
 * @param mixed|null $case_insensitive
 *
 * @return bool
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.define.php
 */
function define($constant_name, $value, $case_insensitive = null): bool
{
}

/**
 * Checks whether a given named constant exists
 *
 * @param mixed $constant_name
 *
 * @return bool
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.defined.php
 */
function defined($constant_name): bool
{
}

/**
 * Return the current key and value pair from an array and advance the array cursor
 *
 * @param mixed $arr
 *
 * @return array
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @deprecated as of PHP 7.2.0
 *
 * @link http://www.php.net/manual/en/function.each.php
 */
function each(&$arr): array
{
}

/**
 * Sets which PHP errors are reported
 *
 * @param mixed|null $new_error_level
 *
 * @return int
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.error-reporting.php
 */
function error_reporting($new_error_level = null): int
{
}

/**
 * Find out whether an extension is loaded
 *
 * @param mixed $extension_name
 *
 * @return bool
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.extension-loaded.php
 */
function extension_loaded($extension_name): bool
{
}

/**
 * Return an item from the argument list
 *
 * @param mixed $arg_num
 *
 * @return mixed
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.func-get-arg.php
 */
function func_get_arg($arg_num)
{
}

/**
 * Returns an array comprising a function's argument list
 *
 * @return array
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.func-get-args.php
 */
function func_get_args(): array
{
}

/**
 * Returns the number of arguments passed to the function
 *
 * @return int
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.func-num-args.php
 */
function func_num_args(): int
{
}

/**
 * Return <code>TRUE</code> if the given function has been defined
 *
 * @param mixed $function_name
 *
 * @return bool
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.function-exists.php
 */
function function_exists($function_name): bool
{
}

/**
 * Forces collection of any existing garbage cycles
 *
 * @return int
 *
 * @since PHP 5 >= 5.3.0, PHP 7
 *
 * @link http://www.php.net/manual/en/function.gc-collect-cycles.php
 */
function gc_collect_cycles(): int
{
}

/**
 * Deactivates the circular reference collector
 *
 * @return void
 *
 * @since PHP 5 >= 5.3.0, PHP 7
 *
 * @link http://www.php.net/manual/en/function.gc-disable.php
 */
function gc_disable()
{
}

/**
 * Activates the circular reference collector
 *
 * @return void
 *
 * @since PHP 5 >= 5.3.0, PHP 7
 *
 * @link http://www.php.net/manual/en/function.gc-enable.php
 */
function gc_enable()
{
}

/**
 * Returns status of the circular reference collector
 *
 * @return bool
 *
 * @since PHP 5 >= 5.3.0, PHP 7
 *
 * @link http://www.php.net/manual/en/function.gc-enabled.php
 */
function gc_enabled(): bool
{
}

/**
 * Reclaims memory used by the Zend Engine memory manager
 *
 * @return int
 *
 * @since PHP 7
 *
 * @link http://www.php.net/manual/en/function.gc-mem-caches.php
 */
function gc_mem_caches(): int
{
}

/**
 * The "Late Static Binding" class name
 *
 * @return string
 *
 * @since PHP 5 >= 5.3.0, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-called-class.php
 */
function get_called_class(): string
{
}

/**
 * Returns the name of the class of an object
 *
 * @param mixed|null $object
 *
 * @return string
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-class.php
 */
function get_class($object = null): string
{
}

/**
 * Gets the class methods' names
 *
 * @param mixed $class
 *
 * @return array
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-class-methods.php
 */
function get_class_methods($class): array
{
}

/**
 * Get the default properties of the class
 *
 * @param mixed $class_name
 *
 * @return array
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-class-vars.php
 */
function get_class_vars($class_name): array
{
}

/**
 * Returns an array with the name of the defined classes
 *
 * @return array
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-declared-classes.php
 */
function get_declared_classes(): array
{
}

/**
 * Returns an array of all declared interfaces
 *
 * @return array
 *
 * @since PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-declared-interfaces.php
 */
function get_declared_interfaces(): array
{
}

/**
 * Returns an array of all declared traits
 *
 * @return array
 *
 * @since PHP 5 >= 5.4.0, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-declared-traits.php
 */
function get_declared_traits(): array
{
}

/**
 * Returns an associative array with the names of all the constants and their values
 *
 * @param mixed|null $categorize
 *
 * @return array
 *
 * @since PHP 4 >= 4.1.0, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-defined-constants.php
 */
function get_defined_constants($categorize = null): array
{
}

/**
 * Returns an array of all defined functions
 *
 * @param mixed|null $exclude_disabled
 *
 * @return array
 *
 * @since PHP 4 >= 4.0.4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-defined-functions.php
 */
function get_defined_functions($exclude_disabled = null): array
{
}

/**
 * Returns an array of all defined variables
 *
 * @return array
 *
 * @since PHP 4 >= 4.0.4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-defined-vars.php
 */
function get_defined_vars(): array
{
}

/**
 * Returns an array with the names of the functions of a module
 *
 * @param mixed $extension_name
 *
 * @return array
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-extension-funcs.php
 */
function get_extension_funcs($extension_name): array
{
}

/**
 * Returns an array with the names of included or required files
 *
 * @return array
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-included-files.php
 */
function get_included_files(): array
{
}

/**
 * Returns an array with the names of all modules compiled and loaded
 *
 * @param mixed|null $zend_extensions
 *
 * @return array
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-loaded-extensions.php
 */
function get_loaded_extensions($zend_extensions = null): array
{
}

/**
 * Gets the properties of the given object
 *
 * @param mixed $obj
 *
 * @return array
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-object-vars.php
 */
function get_object_vars($obj): array
{
}

/**
 * Retrieves the parent class name for object or class
 *
 * @param mixed|null $object
 *
 * @return string
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-parent-class.php
 */
function get_parent_class($object = null): string
{
}

/**
 * Alias of <code>get_included_files</code>
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-required-files.php
 */
function get_required_files()
{
}

/**
 * Returns the resource type
 *
 * @param mixed $res
 *
 * @return string
 *
 * @since PHP 4 >= 4.0.2, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-resource-type.php
 */
function get_resource_type($res): string
{
}

/**
 * Returns active resources
 *
 * @param mixed|null $type
 *
 * @return array
 *
 * @since PHP 7
 *
 * @link http://www.php.net/manual/en/function.get-resources.php
 */
function get_resources($type = null): array
{
}

/**
 * Checks if the interface has been defined
 *
 * @param mixed $classname
 * @param mixed|null $autoload
 *
 * @return bool
 *
 * @since PHP 5 >= 5.0.2, PHP 7
 *
 * @link http://www.php.net/manual/en/function.interface-exists.php
 */
function interface_exists($classname, $autoload = null): bool
{
}

/**
 * Checks if the object is of this class or has this class as one of its parents
 *
 * @param mixed $object
 * @param mixed $class_name
 * @param mixed|null $allow_string
 *
 * @return bool
 *
 * @since PHP 4 >= 4.2.0, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.is-a.php
 */
function is_a($object, $class_name, $allow_string = null): bool
{
}

/**
 * Checks if the object has this class as one of its parents or implements it
 *
 * @param mixed $object
 * @param mixed $class_name
 * @param mixed|null $allow_string
 *
 * @return bool
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.is-subclass-of.php
 */
function is_subclass_of($object, $class_name, $allow_string = null): bool
{
}

/**
 * Checks if the class method exists
 *
 * @param mixed $object
 * @param mixed $method
 *
 * @return bool
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.method-exists.php
 */
function method_exists($object, $method): bool
{
}

/**
 * Checks if the object or class has a property
 *
 * @param mixed $object_or_class
 * @param mixed $property_name
 *
 * @return bool
 *
 * @since PHP 5 >= 5.1.0, PHP 7
 *
 * @link http://www.php.net/manual/en/function.property-exists.php
 */
function property_exists($object_or_class, $property_name): bool
{
}

/**
 * Restores the previous error handler function
 *
 * @return bool
 *
 * @since PHP 4 >= 4.0.1, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.restore-error-handler.php
 */
function restore_error_handler(): bool
{
}

/**
 * Restores the previously defined exception handler function
 *
 * @return bool
 *
 * @since PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.restore-exception-handler.php
 */
function restore_exception_handler(): bool
{
}

/**
 * Sets a user-defined error handler function
 *
 * @param mixed $error_handler
 * @param mixed|null $error_types
 *
 * @return mixed
 *
 * @since PHP 4 >= 4.0.1, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.set-error-handler.php
 */
function set_error_handler($error_handler, $error_types = null)
{
}

/**
 * Sets a user-defined exception handler function
 *
 * @param mixed $exception_handler
 *
 * @return callable
 *
 * @since PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.set-exception-handler.php
 */
function set_exception_handler($exception_handler): callable
{
}

/**
 * Binary safe case-insensitive string comparison
 *
 * @param mixed $str1
 * @param mixed $str2
 *
 * @return int
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.strcasecmp.php
 */
function strcasecmp($str1, $str2): int
{
}

/**
 * Binary safe string comparison
 *
 * @param mixed $str1
 * @param mixed $str2
 *
 * @return int
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.strcmp.php
 */
function strcmp($str1, $str2): int
{
}

/**
 * Get string length
 *
 * @param mixed $str
 *
 * @return int
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.strlen.php
 */
function strlen($str): int
{
}

/**
 * Binary safe case-insensitive string comparison of the first n characters
 *
 * @param mixed $str1
 * @param mixed $str2
 * @param mixed $len
 *
 * @return int
 *
 * @since PHP 4 >= 4.0.2, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.strncasecmp.php
 */
function strncasecmp($str1, $str2, $len): int
{
}

/**
 * Binary safe string comparison of the first n characters
 *
 * @param mixed $str1
 * @param mixed $str2
 * @param mixed $len
 *
 * @return int
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.strncmp.php
 */
function strncmp($str1, $str2, $len): int
{
}

/**
 * Checks if the trait exists
 *
 * @param mixed $traitname
 * @param mixed|null $autoload
 *
 * @return bool
 *
 * @since PHP 5 >= 5.4.0, PHP 7
 *
 * @link http://www.php.net/manual/en/function.trait-exists.php
 */
function trait_exists($traitname, $autoload = null): bool
{
}

/**
 * Generates a user-level error/warning/notice message
 *
 * @param mixed $message
 * @param mixed|null $error_type
 *
 * @return bool
 *
 * @since PHP 4 >= 4.0.1, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.trigger-error.php
 */
function trigger_error($message, $error_type = null): bool
{
}

/**
 * Alias of <code>trigger_error</code>
 *
 * @param mixed $message
 * @param mixed|null $error_type
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.user-error.php
 */
function user_error($message, $error_type = null)
{
}

/**
 * Gets the version of the current Zend engine
 *
 * @return string
 *
 * @since PHP 4, PHP 5, PHP 7
 *
 * @link http://www.php.net/manual/en/function.zend-version.php
 */
function zend_version(): string
{
}
